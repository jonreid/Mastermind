---
description: 
globs: 
alwaysApply: true
---
# Project Structure Guide

## Overview

The Mastermind project follows a clean architecture pattern with clear separation between domain logic and UI components. The project is organized into logical layers with comprehensive testing at each level.

## Root Directory Structure

```
Mastermind/
├── Mastermind/              # Main iOS app source code
├── Mastermind.xcodeproj/    # Xcode project configuration
├── build_release.sh         # Release build script
├── run_tests.sh            # Test execution script
├── MastermindTests.xctestplan # Test plan configuration
├── XcodeWarnings.xcconfig  # Xcode warning settings
├── README.md               # Project documentation
└── LICENSE.txt             # License information
```

## Main App Structure (`Mastermind/`)

### Core Files
- `MastermindApp.swift` - Main app entry point and configuration

### Domain Layer (`Domain/`)
Contains business logic and core game mechanics:

```
Domain/
├── Game.swift              # Main game state and logic
├── Secret.swift            # Secret code generation and validation
├── SecretMaker.swift       # Secret code creation utilities
├── Guess.swift             # Player guess representation
├── CodeChoice.swift        # Individual code peg selection
├── Feedback.swift          # Game feedback logic
├── FeedbackPeg.swift       # Individual feedback peg
├── Rounds.swift            # Game round management
└── Tests/                  # Domain layer unit tests
    ├── GameTests.swift
    ├── SecretTests.swift
    ├── SecretMakerTests.swift
    ├── GuessTests.swift
    ├── CodeChoiceTests.swift
    └── FeedbackTests.swift
```

### UI Layer (`UI/`)
Contains SwiftUI views and UI components:

```
UI/
├── GameScreen.swift        # Main game interface
├── RoundView.swift         # Individual round display
├── FeedbackView.swift      # Feedback peg display
├── CheckButton.swift       # Game action button
├── FeedbackPeg+Color.swift # Color extensions for feedback
├── InspectableSheet.swift  # Debug/inspection interface
├── TestableView.swift      # Testing utilities for UI
└── Tests/                  # UI layer tests using ViewInspector
    ├── GameScreenTests.swift
    ├── RoundViewTests.swift
    ├── FeedbackViewTests.swift
    ├── CheckButtonSnapshotTests.swift
    ├── FeedbackPeg+ColorTests.swift
    └── UpdateTestableView.swift
```

### Assets (`Assets.xcassets/`)
Game visual resources:

```
Assets.xcassets/
├── AppIcon.appiconset/     # App icon images
├── AccentColor.colorset/   # App accent color
├── Background.colorset/    # Background color
├── Unselected.colorset/    # Unselected state color
└── Pegs/                   # Game peg colors
    ├── Correct.colorset/   # Correct peg color
    ├── Misplaced.colorset/ # Misplaced peg color
    └── Unselected.colorset/ # Unselected peg color
```

## Important Files and Their Purposes

### Core Game Logic
- `@Mastermind/Domain/Game.swift` - Central game state management
- `@Mastermind/Domain/Secret.swift` - Secret code handling
- `@Mastermind/Domain/Guess.swift` - Player input processing

### Main UI Components
- `@Mastermind/UI/GameScreen.swift` - Primary game interface
- `@Mastermind/UI/RoundView.swift` - Round display component
- `@Mastermind/UI/FeedbackView.swift` - Game feedback display

### Testing
- `@Mastermind/Domain/Tests/` - Unit tests for business logic
- `@Mastermind/UI/Tests/` - SwiftUI view tests using ViewInspector
- `MastermindTests.xctestplan` - Test execution configuration

### Build and Configuration
- `build_release.sh` - Automated release builds
- `run_tests.sh` - Test execution automation
- `XcodeWarnings.xcconfig` - Compiler warning settings

## Architecture Patterns

### Domain Layer
- **Pure Swift** - No UI dependencies
- **Testable** - Comprehensive unit test coverage
- **Single Responsibility** - Each file handles one concern

### UI Layer
- **SwiftUI** - Modern declarative UI framework
- **ViewInspector Testing** - Unit tests for SwiftUI views using ViewInspector

### Testing Strategy
- **Unit Tests** - Domain logic validation
- **ViewInspector Tests** - SwiftUI view behavior testing (not traditional UI tests)
- **Test Plans** - Organized test execution

## File Organization Pattern

### Test Placement
For any folder containing source files, associated tests belong in a `Tests/` subfolder next to the source files:

```
Feature/
├── SourceFile1.swift
├── SourceFile2.swift
└── Tests/
    ├── SourceFile1Tests.swift
    └── SourceFile2Tests.swift
```

### Examples from the Project
- `Domain/Tests/` - Tests for domain logic files
- `UI/Tests/` - Tests for SwiftUI view files
- Each test file corresponds to a source file in the parent directory

## File Naming Conventions

### Swift Files
- **PascalCase** for types and protocols
- **Descriptive names** that indicate purpose
- **+Extensions** for category extensions (e.g., `FeedbackPeg+Color.swift`)

### Test Files
- **Test suffix** for unit tests
- **Tests directory** organization by layer

Follow this structure when adding new features or modifying existing code to maintain consistency and organization.
