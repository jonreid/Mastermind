---
description: 
globs: 
alwaysApply: true
---
# Application Stack Guide

## Overview

The Mastermind project uses a modern Swift development stack focused on testing and UI development. The application leverages SwiftUI for the user interface with comprehensive testing capabilities.

## Core Dependencies

### ViewInspector (v0.10.2)
**Purpose**: SwiftUI view testing framework
**Repository**: https://github.com/nalexn/ViewInspector.git

**Usage**: Unit testing SwiftUI views without UI tests
```swift
// Example usage in tests
func test_buttonTapped_sendsAction() throws {
    let sut = GameScreen()
    try sut.inspect().button().tap()
    // Verify expected behavior
}
```

**Best Practices**:
- Use for testing SwiftUI view behavior and interactions
- Prefer ViewInspector over traditional UI tests for faster feedback
- Test view state changes and user interactions
- Keep view tests focused on behavior, not implementation details

### Swift Snapshot Testing (v1.17.6)
**Purpose**: Visual regression testing for SwiftUI views
**Repository**: https://github.com/pointfreeco/swift-snapshot-testing.git

**Usage**: Capturing and comparing view snapshots
```swift
// Example usage in tests
func test_gameScreen_snapshot() throws {
    let sut = GameScreen()
    assertSnapshot(of: sut, as: .image)
}
```

**Best Practices**:
- Use for visual consistency testing
- Commit snapshot files to version control
- Update snapshots intentionally when UI changes
- Test different view states and configurations

### Swift Syntax (v600.0.1)
**Purpose**: Swift source code parsing and manipulation
**Repository**: https://github.com/swiftlang/swift-syntax

**Usage**: Code generation and analysis (typically used by other tools)
```swift
// This is a transitive dependency, not directly used in the app
// Used by testing frameworks for code introspection
```

**Best Practices**:
- This is a transitive dependency managed by other packages
- No direct usage required in application code
- Keep version updated for security and compatibility

## Technology Stack

### Frontend Framework
- **SwiftUI**: Modern declarative UI framework
- **iOS Target**: Native iOS application

### Testing Strategy
- **Unit Tests**: Domain logic and business rules
- **ViewInspector**: SwiftUI view behavior testing
- **Snapshot Testing**: Visual regression testing
- **Test Plans**: Organized test execution

### Development Tools
- **Xcode**: Primary development environment
- **Swift Package Manager**: Dependency management
- **Git**: Version control

## Version Management

### Current Versions
- **ViewInspector**: 0.10.2 (Latest stable)
- **Swift Snapshot Testing**: 1.17.6 (Latest stable)
- **Swift Syntax**: 600.0.1 (Latest stable)

### Update Strategy
- **Regular Updates**: Check for updates monthly
- **Security Updates**: Apply immediately
- **Breaking Changes**: Test thoroughly before updating
- **Dependency Lock**: Use exact versions for stability

## Best Practices

### Dependency Management
- **Minimal Dependencies**: Only add dependencies when necessary
- **Stable Versions**: Use stable releases, avoid beta versions
- **Security**: Regularly update dependencies for security patches
- **Documentation**: Document why each dependency is needed

### Testing Approach
- **ViewInspector First**: Use ViewInspector for SwiftUI testing
- **Snapshot Testing**: For visual regression testing
- **Unit Tests**: For business logic and domain models
- **Test Coverage**: Aim for comprehensive coverage

### Development Workflow
- **TDD**: Test-driven development with ViewInspector
- **Visual Testing**: Snapshot tests for UI consistency
- **Continuous Integration**: Automated testing in CI/CD
- **Code Quality**: Maintain high test coverage

## Security Considerations

### Dependency Security
- **Regular Audits**: Check dependencies for security vulnerabilities
- **Version Pinning**: Use exact versions to prevent supply chain attacks
- **Source Verification**: Verify dependency sources and authenticity
- **Update Strategy**: Have a plan for security updates

### Testing Security
- **No Sensitive Data**: Avoid committing sensitive data in tests
- **Mock External Services**: Don't test against real external services
- **Secure Test Data**: Use safe, non-sensitive test data

## Performance Considerations

### Testing Performance
- **Fast Feedback**: ViewInspector provides faster feedback than UI tests
- **Snapshot Optimization**: Optimize snapshot test performance
- **Test Isolation**: Ensure tests don't interfere with each other
- **CI/CD Optimization**: Optimize test execution in continuous integration

### Application Performance
- **SwiftUI Optimization**: Follow SwiftUI best practices for performance
- **Memory Management**: Proper memory management in SwiftUI views
- **State Management**: Efficient state management patterns

Follow this stack when adding new features or dependencies to maintain consistency and quality.
