---
description:
globs:
alwaysApply: false
---
# Microobjects Philosophy

## Core Philosophy

## Code Organization
- **Composition over Inheritance**: Prefer interfaces and dependency injection over class hierarchies
- **Self-Documenting Code**: Write code that reads like prose - comments are either lies or apologies
- **Readability First**: Optimize for human understanding, optimize performance only when needed
- **Descriptive Naming**: Use long, descriptive names that clearly express intent and purpose
- **SmallTalk Microobjects**: Prefer very small, focused objects with single responsibilities
- **Extreme Encapsulation**: Objects protect their private data and answer questions rather than exposing internal state

## Error Handling
- **Fail-Fast with Unchecked Exceptions**: Use RuntimeException and its subclasses
- **Fail Early**: Validate inputs and fail immediately when preconditions aren't met
- **No Silent Failures**: Always throw exceptions rather than returning null or empty results

## Testing Approach
- **Test-Driven Development**: Write tests first, then implement the minimal code to pass
- **Behavior-Driven Development**: Use descriptive test names that explain the behavior
- **Test Names as Documentation**: Test method names should read like specifications

## Encapsulation Principles
- **Ask, Don't Tell**: Ask objects questions rather than extracting their data
- **Keep Logic with Data**: Business logic about an object's data belongs with that object
- **No Data Leakage**: Objects never expose their internal state through getters
- **Composed Responses**: Objects provide answers by composing their internal knowledge
- **Tell, Don't Ask**: Objects tell other objects what to do rather than being asked for data

## Remember Your Principles

- **Composition over Inheritance**: Use interfaces and dependency injection
- **Self-Documenting Code**: Write code that explains itself
- **Descriptive Naming**: Use long, clear names that express intent
- **Fail-Fast**: Use unchecked exceptions and validate early
- **Readability First**: Optimize for human understanding
- **Test-Driven**: Write tests first, then implement
- **Manual DI**: Use constructors and factory patterns
- **No Comments**: Code should be self-explanatory

Focus on writing code that's easy to read, understand, and maintain. Let the code speak for itself!
